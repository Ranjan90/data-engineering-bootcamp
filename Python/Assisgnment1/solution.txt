## Assignment Part-1
Q1. Why do we call Python as a general purpose and high-level programming language?
sol:- Python is a general-purpose language, meaning it can be used to solve a variety of different programs for and it isn't 
 specialized for any specific problems.we can use Python to solve problems for common scenarios.It is called as high level programming
 language as it can be easily understood by Humans.


Q2. Why is Python called a dynamically typed language?
sol:-In other programming languaged like C++,Java etc there is a there is a strict declaration of variables before assigning values to them.
but in python you dont need to declare the type of variable hence it is dynamically typed language.

Q3. List some pros and cons of Python programming language?
sol: The pros of pythons are
1)Beginner-friendly
2)Large Community
3)Flexible and Extensible
4)Extensive Libraries
5)Embeddable
6)Highly Scalable
7) It is widley use in machine learning 
8)portable

The cons are
1) It is a dynamically typed language
2)Python is unsuitable for complicated designs.
3)It is not as fast as other standard compiled languages.
4)Fails to offer 100% security.
5)Python suffers from high memory consumption.



Q4. In what all domains can we use Python?
sol: 1)Python is the go-to programming language for data science domain such as artificial intelligence, machine learning and deep learning
2)it is used for web development
3)it is used in Gaming
4) It is used in OS development

Q5. What are variable and how can we declare them?
sol:-A Python variable is a reserved memory location to store values. In other words, 
a variable in a python program gives data to the computer for processing.
ex:- a=10,b='test' 

Q6. How can we take an input from the user in Python?
sol:- using Input() function in python
ex:-a= input()

Q7. What is the default datatype of the value that has been taken as an input using input() function?
sol:- String type

Q8. What is type casting?
sol:- Coverting a variable from one data type to another is called as type casting.
ex:-a = 5
 # typecast to float
n = float(a)

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?
sol: yes we can take more than one input using SPlit method
x,y,z = input("Enter variables: ").split(",",3)
print(x,y,z)

Q10. What are keywords?
sol: Keywords are reserved words that cannot be used as variable names, function names, or any other identifiers:

Q11. Can we use keywords as a variable? Support your answer with reason.
No we cannot use keywords as variable or function names or any identifier as per python official documentation it will throw error
ex:- def=[45,5665,98] will throw an error



Q12. What is indentation? What's the use of indentaion in Python?

sol: indentation is giving correct spaces and tabs in the code which makes it easily readable and understandable.As per the guide lines of Python without indentation 
it will definitly through you the error.
ex:if a>200:{ print("inueron") } else: print("Inueron") 

Q13. How can we throw some output in Python?
sol:using print() function
ex:-print("hello ")

Q14. What are operators in Python?
sol: operators are special symbols that designate that some sort of computation should be performed
ex:- x+y,a-b,c*d 

Q15. What is difference between / and // operators?
sol:- '/' is the division operator. '//' is the floor division operator. 
ex:-10/3 returns 3.33 while 10//3 gives 3

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```
sol: c="iNeuron"
print(c*4)

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
sol: n=int(input(""))
if n%2==0:
    print("It is even")
else:
    print("It is odd")

Q18. What are boolean operator?
sol:The logical operators and, or and not are also referred to as boolean operators. While and as well as or operator needs 
two operands, which may evaluate to true or false, not operator needs one operand evaluating to true or false.
Boolean and operator returns true if both operands return true.

Q19. What will the output of the following?
```
1 or 0
sol:1

0 and 0
sol:0

True and False and True
sol: False

1 or 0 or 0
sol:1
```

Q20. What are conditional statements in Python?
sol: A conditional statement as the name suggests itself, is used to handle conditions in your program. 
These statements guide the program while making decisions based on the conditions encountered by the program.

Q21. What is use of 'if', 'elif' and 'else' keywords?
sol: Python uses the if keyword to implement decision control if expression evaluates to true do something
else:- if you want to execute condition other than that in if block then use else keyword.
elif :- if you want to implement multiple if conditions then we need to use elif.

Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
sol:

n=int(input())
if n>=18:
    print("I can vote")
else:
    print("I can't vote")

Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
sol:numbers = [12, 75, 150, 180, 145, 525, 50]
result=0
for i in numbers:
    if(i%2==0):
        result+=i
print(result)


Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
sol: a=int(input())
b=int(input())
c=int(input())

if (a>b) and (a>c):
    print("max number is",a)
elif(b>c) and (b>a):
    print("max number is",b)
else:
    print("max number is ",c)

Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
sol: 
numbers = [12, 75, 150, 180, 145, 525, 50]
for i in numbers:
    if(i%5==0):
        if(i>150):
            continue
        if(i>500):
            break
        else:
            print(i)

Q26. What is a string? How can we declare string in Python?
sol: In Python, Strings are arrays of bytes representing Unicode characters.
ex: str1="Welcome to Inueron"


Q27. How can we access the string using its index?
sol: str1= "Hello"
print(str[2]) 
will print 'l'

Q28. Write a code to get the desired output of the following

string = "Big Data iNeuron"
sol:- string.split(' ')[2]
desired_output = "iNeuron"
Q29. Write a code to get the desired output of the following
"
string = "Big Data iNeuron"
sol: t1=string.split(' ')[2]
print(t1[ : :-1])
desired_output = "norueNi"
Q30. Resverse the string given in the above question.
sol:- s1="norueNi"
print(s1[::-1])

Q31. How can you delete entire string at once?
sol:- using del keyword
ex:- del String1

Q32. What is escape sequence?
To insert characters that are illegal in a string, use an escape character.

An escape character is a backslash \ followed by the character you want to insert.
ex:- txt = "We are the so-called \"Vikings\" from the north."

Q33. How can you print the below string?
'iNeuron's Big Data Course'

sol: 'iNeuron\'s Big Data Course'

Q34. What is a list in Python?
sol:Lists are used to store multiple items or collections of data in a single variable.
ex:-thislist = ["apple", "banana", "cherry"]

Q35. How can you create a list in Python?
list1=[10,20,67,"Test1"]
orlist1=list((10,20,67,"Test1"))

Q36. How can we access the elements in a list?
sol:-using list indexes
ex:- list1[2],list1[3] etc


Q37. Write a code to access the word "iNeuron" from the given list.

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
sol:-lst[4]

Q38. Take a list as an input from the user and find the length of the list.
sol n=list(input())
print(len(n))

Q39. Add the word "Big" in the 3rd index of the given list.

lst = ["Welcome", "to", "Data", "course"]
lst[3]='Big'
Q40. What is a tuple? How is it different from list?
sol:A tuple is a collection which is ordered and unchangeable. The elements of a tuple cannot be modified
the tuple contains different methods like count() and index() whereas list has different methods like append  

Q41. How can you create a tuple in Python?
sol: tuple1 = ("apple", "banana", "cherry")

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
sol:- tuple1 = ("apple", "banana", "cherry")
tuple1=("apple", "banana", "cherry","ranjan")
yes we will be able to add the elements to tuple.

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?
tuple1 = ("apple", "banana", "cherry","ranjan")
tuple2=(10,20,30)
tuple3=(tuple1,tuple2)
output:- (('apple', 'banana', 'cherry', 'ranjan'), (10, 20, 30))

Q44. Take a tuple as an input and print the count of elements in it.
sol: n=tuple(input())
print(len(n))

Q45. What are sets in Python?
sol:- Set is one of 4 built-in data types in Python used to store collections of data.it does not allow duplicate values.

Q46. How can you create a set?
sol: s1={10,30,50}

Q47. Create a set and add "iNeuron" in your set.
s1={10,30,50}
s1={10,30,50,"iNeuron"}


Q48. Try to add multiple values using add() function.
sol: s1={10,30,50,"iNeuron"}
    s1.add("red")
     s1.add("Blue")
      s1.add("green")

Q49. How is update() different from add()?
add():- this methods add elements to set
update():-This method add the set to another set.
ex:- thisset = {"apple", "banana", "cherry"}
tropical = {"pineapple", "mango", "papaya"}
thisset.update(tropical)

print(thisset)
Q50. What is clear() in sets?
sol:- it is used to remove the elements in set 

Q51. What is frozen set?
sol:-The frozenset() function returns an unchangeable frozenset object (which is like a set object, only unchangeable).
mylist = ['apple', 'banana', 'cherry']
x = frozenset(mylist)

Q52. How is frozen set different from set?
ex:-trying to change the value of frozen set  will give  error if we dont want list item to be
changed then we can freeze the list and make it  unchangeable.
ex:-list1 = ['apple', 'banana', 'cherry']
x = frozenset(list1)

Q53. What is union() in sets? Explain via code.
sol:- Return a set that contains all items from both sets, duplicates are excluded:
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}
z = x.union(y)
print(z)


Q54. What is intersection() in sets? Explain via code.
sol: Returns a set that contains only common elements from both sets duplicates are excluded.
ex:-x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}
z = x. intersection(y)

Q55. What is dictionary ibn Python?
sol:- A dictionary is a collection which stores data in key value pairs.It cannot contain duplicate keys
ex:-dict1 = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964,
  "year1": 1964
}
print(dict1)
Q56. How is dictionary different from all other data structures.
A dictionary is a collection which stores data in key value pairs.It cannot contain duplicate keys

Q57. How can we delare a dictionary in Python?
sol: dict1 = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964,
  "year1": 1964
}
print(dict1)

Q58. What will the output of the following?

var = {}
print(type(var))
sol:-dict

Q59. How can we add an element in a dictionary?
sol: dict1 = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["color"] = "red"
print(thisdict)

Q60. Create a dictionary and access all the values in that dictionary.
sol:dict1 = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = dict1.values()

Q61. Create a nested dictionary and access all the element in the inner dictionary.
sol: myfamily = {
  "child1" : {
    "name" : "Emil",
    "year" : 2004
  },
  "child2" : {
    "name" : "Tobias",
    "year" : 2007
  },
  "child3" : {
    "name" : "Linus",
    "year" : 2011
  }
}

myfamily.values() will give below output
dict_values([{'name': 'Emil', 'year': 2004}, {'name': 'Tobias', 'year': 2007}, {'name': 'Linus', 'year': 2011}])
ex:- people = {1: {'name': 'John', 'age': '27', 'sex': 'Male'},
          2: {'name': 'Marie', 'age': '22', 'sex': 'Female'}}

print(people[1]['name'])
print(people[1]['age'])
​

Q62. What is the use of get() function?
sol: Returns the value of the specified key

Q63. What is the use of items() function?
sol:Returns a list containing a tuple for each key value pair

Q64. What is the use of pop() function?
sol:Removes the element with the specified key

Q65. What is the use of popitems() function?
sol: Removes the last inserted key-value pair

Q66. What is the use of keys() function?
sol: Returns a list containing the dictionary's keys

Q67. What is the use of values() function?
sol:Returns a list of all the values in the dictionary

Q68. What are loops in Python?

Ans68. Loops are used the iterate over a block of statement multiple times.

Q69. How many type of loop are there in Python?

Ans69. There is for and while loop in Python

Q70. What is the difference between for and while loops?

Ans70. When we know the exact number of iterations, we can use for loop. When we want the to run till a certain condition is true we can use while loop.

Q71. What is the use of continue statement?

Ans71. Continue Statement skips the execution of the program block from after the continue statement and forces the control to start the next iteration.

Q72. What is the use of break statement?

Ans72. break statement in Python is used to bring the control out of the loop when some external condition is triggered. break statement is put inside the loop body

Q73. What is the use of pass statement?

Ans73. The pass statement is a null statement. But the difference between pass and comment is that comment is ignored by the interpreter whereas pass is not ignored.

Q74. What is the use of range() function?

Ans74. range() function returns a sequence of numbers, in a given range. The most common use of it is to iterate sequence on a sequence of numbers

Q75. How can you loop over a dictionary?

Ans75.

statesAndCapitals = {
	'Gujarat': 'Gandhinagar',
	'Maharashtra': 'Mumbai',
	'Rajasthan': 'Jaipur',
	'Bihar': 'Patna'
}

for state in statesAndCapitals:
	print(state)
Coding problems
Q76. Write a Python program to find the factorial of a given number.

Ans76.

def factorial(n):
  if n < 0:
    return 0
  elif n == 0 or n == 1:
    return 1
  else:
    fact = 1
    while(n>1):
      fact *= n
      n -= 1
    return fact

n=6
print(f"Factorial of {n} is {factorial(n)}")
Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100

Ans77.

def SI(p,r,t):
  si = (p*r*t)/100
  print(f"Simple interest is {si}")
  return si

SI(8, 8, 6)
Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.

Ans78.

def CI(p, r, t):
  amount = p*(1+r/100)**t
  ci = amount - p
  print(f"Compound intrest is {ci}")
  return ci

CI(10000, 10.25, 5)
Q79. Write a Python program to check if a number is prime or not.

Ans79.

from math import sqrt

def is_prime(n):
  prime_flag = 0

  if(n > 1):
    for i in range(2, int(sqrt(n)) + 1):
      if (n % i == 0):
        prime_flag = 1
        break
    if (prime_flag == 0):
      print(f"{n} is a prime number.")
    else:
      print(f"{n} is not a prime number.")
  else:
    print(f"{n} is not a prime number.")

is_prime(134)
Q80. Write a Python program to check Armstrong Number.

Ans80.

def check_armstrong(n):
  s = n
  b = len(str(n))
  sum1 = 0
  while n != 0:
      r = n % 10
      sum1 = sum1+(r**b)
      n = n//10
  if s == sum1:
      print(f"The given number {s} is armstrong number")
  else:
      print(f"The given number {s} is not armstrong number")

check_armstrong(153)
Q81. Write a Python program to find the n-th Fibonacci Number.

Ans81.

def Fibonacci(n):
	if n<= 0:
		print("Incorrect input")
	elif n == 1:
		return 0
	elif n == 2:
		return 1
	else:
		return Fibonacci(n-1)+Fibonacci(n-2)

print(Fibonacci(7))
Q82. Write a Python program to interchange the first and last element in a list.

Ans82.

def swap_list(newList):
	size = len(newList)
	temp = newList[0]
	newList[0] = newList[size - 1]
	newList[size - 1] = temp
	
	return newList

newList = [15, 12, 35, 17, 9, 56, 29]

print(swap_list(newList))
def swap_list(newList):
     
    newList[0], newList[-1] = newList[-1], newList[0]
 
    return newList
     
newList = [15, 12, 35, 17, 9, 56, 29]
print(swap_list(newList))
Q83. Write a Python program to swap two elements in a list.

Ans83.

def swapPositions(list, pos1, pos2):
	
	list[pos1], list[pos2] = list[pos2], list[pos1]
	return list

List = [15, 12, 35, 17, 9, 56, 29]
pos1, pos2 = 1, 3

print(f"Original list: {List}")
print(f"Swapped list: {swapPositions(List, pos1, pos2)}")
Q84. Write a Python program to find N largest element from a list.

Ans84.

def n_max_elements(list1, N):
	final_list = []

	for i in range(0, N):
		max1 = 0
		
		for j in range(len(list1)):	
			if list1[j] > max1:
				max1 = list1[j];
				
		list1.remove(max1);
		final_list.append(max1)
		
	print(final_list)

list1 = [2, 6, 41, 85, 0, 3, 7, 6, 10]
N = 3

n_max_elements(list1, N)
Q85. Write a Python program to find cumulative sum of a list.

Ans85.

def cumulative_sum(lists):
	cu_list = []
	length = len(lists)
	cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)]
	return cu_list[1:]

lists = [10, 20, 30, 40, 50]
print(f"Cumulative sum of the list is {cumulative_sum(lists)}")
Q86. Write a Python program to check if a string is palindrome or not.

Ans86.

def isPalindrome(s):
  if s == s[::-1]:
	  return f"{s} is palindrome"
  return f"{s} is not palindrome"

s = "dad"
isPalindrome(s)
Q87. Write a Python program to remove i'th element from a string.

Ans87.

def remove_ith_element(i):
  str1 = "Big Data Bootcamp"
  str2 = ""

  for n in range(len(str1)):
    if n == i:
      continue
    else:
      str2 = str2 + str1[n]

  return str2

remove_ith_element(5)
Q88. Write a Python program to check if a substring is present in a given string.

Ans88.

def check_substring(s2, s1):
	if (s2.count(s1) > 0):
		print(f'"{s1}" is a substring of "{s2}"')
	else:
		print(f'"{s1}" is not a substring of "{s2}"')


s2 = "Welcome to iNeuron Big Data Bootcamp"
s1 = "iNeuron"
check_substring(s2, s1)
Q89. Write a Python program to find words which are greater than given length k.

Ans89.

def string_greater_than_k(k, str):
	
	string = []

	text = str.split(" ")

	for x in text:

		if len(x) > k:

			string.append(x)

	return string

k = 3
str ="Big Data Bootcamp"
print(string_greater_than_k(k, str))
Q90. Write a Python program to extract unquire dictionary values.

Ans90.

test_dict = {'iNeuron': [5, 6, 7, 8],
			'is': [10, 11, 7, 5],
			'best': [6, 12, 10, 8],
			'for': [1, 2, 5],
      'big data': [2, 7, 12, 9]
      }

print("The original dictionary is : " + str(test_dict))

res = list(sorted({ele for val in test_dict.values() for ele in val}))

print("The unique values list is : " + str(res))
Q91. Write a Python program to merge two dictionary.

Ans91.

def Merge(dict1, dict2):
	return(dict2.update(dict1))

dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}

print(Merge(dict1, dict2))

print(dict2)
Q92. Write a Python program to convert a list of tuples into dictionary.

Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
Ans92.

print (dict([('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]))
Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.

Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]
Ans93.

list1 = [9, 5, 6]

res = [(val, pow(val, 3)) for val in list1]

print(res)
Q94. Write a Python program to get all combinations of 2 tuples.

Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
Ans94.

test_tuple1 = (7, 2)
test_tuple2 = (7, 8)

res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

print("The filtered tuple : ", str(res))
Q95. Write a Python program to sort a list of tuples by second item.

Input : [('452', 10), ('256', 5), ('100', 20), ('135', 15)]
Output : [('256', 5), ('452', 10), ('135', 15), ('100', 20)]
Ans95.

def Sort_Tuple(tup):
     
    lst = len(tup)
    for i in range(0, lst):
         
        for j in range(0, lst-i-1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j]= tup[j + 1]
                tup[j + 1]= temp
    return tup
 
tup =[('452', 10), ('256', 5), ('100', 20), ('135', 15)]
       
print(Sort_Tuple(tup))
Q96. Write a python program to print below pattern.

* 
* * 
* * * 
* * * * 
* * * * * 
Ans96.

def pypart(n):
	
	for i in range(0, n):
	
		for j in range(0, i+1):
		
			print("* ",end="")
	
		print("\r")

n = 5
pypart(n)
Q97. Write a python program to print below pattern.

    *
   **
  ***
 ****
*****
Ans97.

def inverse_pattern():
  n=5;i=0
  while(i<=n):
    print(" " * (n - i) +"*" * i)
    i+=1

inverse_pattern()
Q98. Write a python program to print below pattern.

    * 
   * * 
  * * * 
 * * * * 
* * * * * 
Ans98.

def triangle(n):
	
	k = n - 1

	for i in range(0, n):

		for j in range(0, k):
			print(end=" ")
	
		k = k - 1
	
		for j in range(0, i+1):

			print("* ", end="")
	
		print("\r")

n = 5
triangle(n)
Q99. Write a python program to print below pattern.

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
Ans99.

def numpat(n):

	num = 1

	for i in range(0, n):

		num = 1

		for j in range(0, i+1):

			print(num, end=" ")

			num = num + 1

		print("\r")

n = 5
numpat(n)
Q100. Write a python program to print below pattern.

A 
B B 
C C C 
D D D D 
E E E E E 
Ans100.

def alphapat(n):

	num = 65

	for i in range(0, n):
	
		for j in range(0, i+1):

			ch = chr(num)
		
			print(ch, end=" ")
	
		num = num + 1
	
		print("\r")

n = 5
alphapat(n)
